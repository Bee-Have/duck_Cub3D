
DIVIDE IMG:
{
screen must be devided in 4 (width && height)
area_size.x = screen.width / 4
area_size.y = screen.height / 4
}

PXL_UNIT/SIZE FOR MAP IN AREA:
{
make pxl_unit depending on area size
pxl_unit.x = area_size.x / ft_strlen(map[0]);
pxl_unit.y = area_size.y / ft_tab_len((void **)map);

map_size.x = ft_strlen(map[0]) * pxl_unit.x;
map_size.y = ft_tab_len((void **)map) * pxl_unit.y;
}

POS:
{
T_L:
	area_start.x = 0;
	area_start.y = 0;
	area_end.x = area_size.x;
	area_end.y = area_size.y;
T_R:
	area_start.x = screen.width - area_size.x;
	area_start.y = 0;
	area_end.x = screen.width;
	area_end.y = area_size.y;
B_L:
	area_start.x = 0;
	area_start.y = screen.height - area;
	area_end.x = area_size.x;
	area_end.y = screen.height;
B_R:
	area_start.x = screen.width - area;
	area_start.y = screen.height - area;
	area_end.x = screen.width;
	area_end.y = screen.height;
}

OFFSET:
{
offset.x = (area_size.x - map_size.x) / 2;
offset.y = (area_size.y - map_size.y) / 2;
}

START MAP IN IMG:
{
map_start.x = area_start.x + offset.x;
map_start.y = area_start.y + offset.y;
map_end.x = area_end.x - offset.x;
map_end.y = area_end.y - offset.y;
}

PJ POS:
{
pj_pos.x = map_start.x + (pj.pos.x * pxl_unit.x);
pj_pos.y = map_start.y + (pj.pos.y * pxl_unit.y);
}

FUNCTION:
{
void	draw_minimap(t_mlx *mlx, t_vec2 pos, t_vec2 pxl_unit, t_color color);
void	pj_to_img(t_mlx *mlx, t_vec2 map_start, t_vec2 pxl_unit);
}
